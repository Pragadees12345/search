package com.bfsi.ui;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.List;
import java.util.Properties;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;

import org.jdatepicker.DateModel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

import com.bfsi.dto.PaymentDto;
import com.bfsi.payment.PaymentsCriteriaDTO;

/*
 * The SearchPanel class represents a user interface for searching payment batches.
 * It extends JPanel and includes various UI components such as labels, text fields, combo boxes, and date pickers.
 */
public class SearchPanel extends JPanel {

    /*
     * Date picker for selecting the start date.
     * Date picker for selecting the to date.
     */
    private JDatePickerImpl fromDatePicker;
    private JDatePickerImpl toDatePicker;
    private JTextField txFileName;
    private JTextField txBatchId;
    private JTextField txCustomerBatchRef;
    private JTextField txBeneficiaryName;
    private JComboBox<String> statusComboBox;

    List<PaymentDto> paymentDtoList;
    ClientUtils clientUtils;
    PaymentsCriteriaDTO dtoObject = new PaymentsCriteriaDTO();

    public SearchPanel(TablePanel tablePanel) {
        setLayout(null);

        // Initialize client utility
        clientUtils = new ClientUtils();

        JLabel search = new JLabel("Search Payment Batch");
        this.add(search);
        search.setBounds(10, 10, 180, 15);
        this.setFont(new Font("Arial", Font.BOLD, 16));
        this.setBorder(new LineBorder(Color.black));
        this.setBackground(Color.WHITE);

        JLabel dateCreated = new JLabel();
        dateCreated.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Date Created"));
        dateCreated.setBounds(20, 39, 390, 90);
        add(dateCreated);

        JLabel from = new JLabel("From");
        from.setBounds(20, 15, 50, 30);
        dateCreated.add(from);

        fromDatePicker = createDatePicker();
        fromDatePicker.setBounds(25, 40, 150, 30);
        fromDatePicker.setBorder(new LineBorder(Color.BLACK));
        dateCreated.add(fromDatePicker);

        JLabel to = new JLabel("TO");
        to.setBounds(230, 15, 50, 30);
        dateCreated.add(to);

        toDatePicker = createDatePicker();
        toDatePicker.setBounds(230, 40, 150, 30);
        toDatePicker.setBorder(new LineBorder(Color.BLACK));
        dateCreated.add(toDatePicker);

        JLabel status = new JLabel("Status ");
        status.setBounds(430, 50, 110, 30);
        add(status);
        statusComboBox = new JComboBox<>(new String[]{"All", "Pending", "Completed", "Processed"});
        statusComboBox.setBounds(430, 73, 110, 30);
        add(statusComboBox);

        JLabel batchId = new JLabel("Batch Id ");
        batchId.setBounds(565, 50, 80, 30);
        add(batchId);
        txBatchId = new JTextField();
        txBatchId.setBounds(565, 73, 110, 30);
        add(txBatchId);

        JLabel customerBatchRef = new JLabel("Customer Batch Ref");
        customerBatchRef.setBounds(695, 50, 145, 30);
        add(customerBatchRef);
        txCustomerBatchRef = new JTextField();
        txCustomerBatchRef.setBounds(700, 73, 110, 30);
        add(txCustomerBatchRef);

        JLabel fileName = new JLabel("File Name");
        fileName.setBounds(835, 50, 80, 30);
        add(fileName);
        txFileName = new JTextField();
        txFileName.setBounds(835, 73, 110, 30);
        add(txFileName);

        JLabel beneficiaryName = new JLabel("Beneficiary Name");
        beneficiaryName.setBounds(970, 50, 120, 30);
        add(beneficiaryName);
        txBeneficiaryName = new JTextField();
        txBeneficiaryName.setBounds(970, 73, 110, 30);
        add(txBeneficiaryName);

        JButton searchBtn = new JButton("Search");
        searchBtn.setBounds(20, 160, 100, 30);
        add(searchBtn);

        // Add action listener to the search button
        searchBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Perform search when the button is clicked
                performSearch(tablePanel);
            }
        });

        JButton resetBtn = new JButton("Reset");
        resetBtn.setBounds(135, 160, 100, 30);
        add(resetBtn);

        resetBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetForm();
            }
        });
    }

    /*
     * Performs the search based on user inputs and updates the table with the results.
     */
    private void performSearch(TablePanel tablePanel) {
        // Initialize variables
        String status, custBatch, fileName, beneficiaryName;
        LocalDate fromDate = null, toDate = null;
        int batchId = 0;

        // Get status from combo box
        status = (String) statusComboBox.getSelectedItem();
        if (status != null && !status.equals("All")) {
            dtoObject.setStatus(status);
        } else {
            dtoObject.setStatus(null); // Allow all statuses if "All" is selected
        }

        // Get customer batch reference from text field
        custBatch = txCustomerBatchRef.getText();
        if (custBatch != null && !custBatch.trim().isEmpty()) {
            dtoObject.setCustomerBatchRef(custBatch.trim());
        } else {
            dtoObject.setCustomerBatchRef(null);
        }

        // Get batch ID from text field and handle potential number format exception
        String batchIdStr = txBatchId.getText();
        if (batchIdStr != null && !batchIdStr.trim().isEmpty()) {
            try {
                batchId = Integer.parseInt(batchIdStr.trim());
                dtoObject.setBatchId(batchId);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Batch ID. Please enter a valid number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else {
            dtoObject.setBatchId(0);
        }

        // Get file name from text field
        fileName = txFileName.getText();
        if (fileName != null && !fileName.trim().isEmpty()) {
            dtoObject.setFileName(fileName.trim());
        } else {
            dtoObject.setFileName(null);
        }

        // Get beneficiary name from text field
        beneficiaryName = txBeneficiaryName.getText();
        if (beneficiaryName != null && !beneficiaryName.trim().isEmpty()) {
            dtoObject.setAdhocBeneficiaryName(beneficiaryName.trim()); // Assuming PaymentsCriteriaDTO has this field
        } else {
            dtoObject.setAdhocBeneficiaryName(null);
        }

        // Get from date from date picker
        DateModel<?> fromDateModel = fromDatePicker.getModel();
        if (fromDateModel.getValue() != null) {
            fromDate = LocalDate.of(fromDateModel.getYear(), fromDateModel.getMonth() + 1, fromDateModel.getDay());
            dtoObject.setFromDate(fromDate);
        } else {
            dtoObject.setFromDate(null);
        }

        // Get to date from date picker
        DateModel<?> toDateModel = toDatePicker.getModel();
        if (toDateModel.getValue() != null) {
            toDate = LocalDate.of(toDateModel.getYear(), toDateModel.getMonth() + 1, toDateModel.getDay());
            dtoObject.setToDate(toDate);
        } else {
            dtoObject.setToDate(null);
        }

        // Check if all fields are empty or not provided
        if ((status == null || status.equals("All")) &&
            (custBatch == null || custBatch.trim().isEmpty()) &&
            batchId == 0 &&
            (fileName == null || fileName.trim().isEmpty()) &&
            (beneficiaryName == null || beneficiaryName.trim().isEmpty()) &&
            fromDate == null &&
            toDate == null) {
            JOptionPane.showMessageDialog(this, "Please provide at least one search criterion.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate date range if both dates are provided
        if (fromDate != null && toDate != null && fromDate.isAfter(toDate)) {
            JOptionPane.showMessageDialog(this, "From Date cannot be after To Date.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perform search using client utility and update table with search results
        try {
            List<PaymentDto> paymentDtoList = clientUtils.getAllSearchRecord(dtoObject);
            System.out.println("Search results: " + paymentDtoList);
            if (paymentDtoList == null || paymentDtoList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No records found for the provided criteria.", "No Results", JOptionPane.INFORMATION_MESSAGE);
                tablePanel.updateTable(new ArrayList<>()); // Clear the table
            } else {
                tablePanel.updateTable(paymentDtoList);
                JOptionPane.showMessageDialog(this, "Search completed. Found " + paymentDtoList.size() + " record(s).", "Search Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to perform search: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /*
     * Resets the form fields to their default values.
     */
    private void resetForm() {
        txBatchId.setText("");
        txCustomerBatchRef.setText("");
        txFileName.setText("");
        txBeneficiaryName.setText("");
        fromDatePicker.getModel().setValue(null);
        toDatePicker.getModel().setValue(null);
        statusComboBox.setSelectedIndex(0);
        dtoObject = new PaymentsCriteriaDTO(); // Reset the criteria object
    }

    /*
     * Creates and returns a JDatePickerImpl component.
     * This method sets up a date picker with a specific date format and custom text for today, month, and year.
     * @return a JDatePickerImpl component configured with the specified properties and date format
     */
    private JDatePickerImpl createDatePicker() {
        UtilDateModel model = new UtilDateModel();
        Properties properties = new Properties();
        properties.put("text.today", "Today");
        properties.put("text.month", "Month");
        properties.put("text.year", "Year");

        JDatePanelImpl datePanel = new JDatePanelImpl(model, properties);
        JDatePickerImpl datePicker = new JDatePickerImpl(datePanel, new AbstractFormatter() {
            private String datePattern = "yyyy-MM-dd";
            private SimpleDateFormat dateFormatter = new SimpleDateFormat(datePattern);

            @Override
            public Object stringToValue(String text) throws ParseException {
                return dateFormatter.parse(text);
            }

            @Override
            public String valueToString(Object value) throws ParseException {
                if (value != null) {
                    Calendar cal = (Calendar) value;
                    return dateFormatter.format(cal.getTime());
                }
                return "";
            }
        });

        return datePicker;
    }
}









package com.bfsi.dto;

import java.io.Serializable;
import java.time.LocalDate;

public class PaymentsCriteriaDTO implements Serializable {
    private static final long serialVersionUID = 1448420918911911488L;

    private int paymentId;
    private LocalDate fromDate;
    private LocalDate toDate;
    private int amountTransfer;
    private String transferCurrency;
    private String submisionMethod;
    private String status;
    private int batchId;
    private String customerBatchRef;
    private String fileName;
    private String adhocBeneficiaryName; // Added field for beneficiary name

    public PaymentsCriteriaDTO() {}

    public PaymentsCriteriaDTO(LocalDate fromDate, LocalDate toDate, String status, int batchId, String customerBatchRef, String fileName, String adhocBeneficiaryName) {
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.status = status;
        this.batchId = batchId;
        this.customerBatchRef = customerBatchRef;
        this.fileName = fileName;
        this.adhocBeneficiaryName = adhocBeneficiaryName;
    }

    // Existing getters and setters...

    public String getAdhocBeneficiaryName() {
        return adhocBeneficiaryName;
    }

    public void setAdhocBeneficiaryName(String adhocBeneficiaryName) {
        this.adhocBeneficiaryName = adhocBeneficiaryName;
    }

    @Override
    public String toString() {
        return "PaymentsCriteriaDTO [paymentId=" + paymentId + ", fromDate=" + fromDate + ", toDate=" + toDate
                + ", amountTransfer=" + amountTransfer + ", transferCurrency=" + transferCurrency
                + ", submisionMethod=" + submisionMethod + ", status=" + status + ", batchId=" + batchId
                + ", customerBatchRef=" + customerBatchRef + ", fileName=" + fileName
                + ", adhocBeneficiaryName=" + adhocBeneficiaryName + "]";
    }
}









package com.bfsi.ejb;

import com.bfsi.dto.PaymentDto;
import com.bfsi.dto.PaymentsCriteriaDTO;
import com.bfsi.entity.PaymentEntity;

import javax.ejb.Stateless;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Queue;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.util.List;

@Stateless
public class PaymentBean implements PaymentBeanLocal {

    @PersistenceContext(unitName = "bfsiPU")
    private EntityManager em;

    @Override
    public List<PaymentDto> getPaymentList() {
        Query query = this.em.createQuery("SELECT NEW com.bfsi.dto.PaymentDto(p.accNo, p.beneficiaryId, p.paymentTypeId, p.dateCreated, p.amountTransfer, p.transferCurrency, p.submissionMethod, p.status, p.batchId, p.customerBatchRef, p.fileName, p.adhocBeneficiaryName, p.adhocAccountNo, p.adhocBeneficiaryCode, p.adhocBeneficiaryCdiRef) FROM PaymentEntity p");
        return query.getResultList();
    }

    @Override
    public List<PaymentDto> searchingPayments(PaymentsCriteriaDTO criteria) {
        StringBuilder queryStr = new StringBuilder("SELECT NEW com.bfsi.dto.PaymentDto(p.accNo, p.beneficiaryId, p.paymentTypeId, p.dateCreated, p.amountTransfer, p.transferCurrency, p.submissionMethod, p.status, p.batchId, p.customerBatchRef, p.fileName, p.adhocBeneficiaryName, p.adhocAccountNo, p.adhocBeneficiaryCode, p.adhocBeneficiaryCdiRef) FROM PaymentEntity p WHERE 1=1");

        System.out.println("Search Criteria: " + criteria);

        if (criteria.getStatus() != null && !criteria.getStatus().isEmpty() && !"All".equalsIgnoreCase(criteria.getStatus())) {
            queryStr.append(" AND UPPER(p.status) = :status");
        }

        if (criteria.getBatchId() > 0) {
            queryStr.append(" AND p.batchId = :batchId");
        }

        if (criteria.getCustomerBatchRef() != null && !criteria.getCustomerBatchRef().isEmpty()) {
            queryStr.append(" AND UPPER(p.customerBatchRef) = :customerBatchRef");
        }

        if (criteria.getFileName() != null && !criteria.getFileName().isEmpty()) {
            queryStr.append(" AND UPPER(p.fileName) = :fileName");
        }

        if (criteria.getAdhocBeneficiaryName() != null && !criteria.getAdhocBeneficiaryName().isEmpty()) {
            queryStr.append(" AND UPPER(p.adhocBeneficiaryName) LIKE :adhocBeneficiaryName");
        }

        if (criteria.getFromDate() != null) {
            queryStr.append(" AND p.dateCreated >= :fromDate");
        }

        if (criteria.getToDate() != null) {
            queryStr.append(" AND p.dateCreated <= :toDate");
        }

        System.out.println("JPQL Query: " + queryStr.toString());

        Query query = this.em.createQuery(queryStr.toString());

        if (criteria.getStatus() != null && !criteria.getStatus().isEmpty() && !"All".equalsIgnoreCase(criteria.getStatus())) {
            query.setParameter("status", criteria.getStatus().toUpperCase());
            System.out.println("Parameter status: " + criteria.getStatus().toUpperCase());
        }

        if (criteria.getBatchId() > 0) {
            query.setParameter("batchId", criteria.getBatchId());
            System.out.println("Parameter batchId: " + criteria.getBatchId());
        }

        if (criteria.getCustomerBatchRef() != null && !criteria.getCustomerBatchRef().isEmpty()) {
            query.setParameter("customerBatchRef", criteria.getCustomerBatchRef().toUpperCase());
            System.out.println("Parameter customerBatchRef: " + criteria.getCustomerBatchRef().toUpperCase());
        }

        if (criteria.getFileName() != null && !criteria.getFileName().isEmpty()) {
            query.setParameter("fileName", criteria.getFileName().toUpperCase());
            System.out.println("Parameter fileName: " + criteria.getFileName().toUpperCase());
        }

        if (criteria.getAdhocBeneficiaryName() != null && !criteria.getAdhocBeneficiaryName().isEmpty()) {
            query.setParameter("adhocBeneficiaryName", "%" + criteria.getAdhocBeneficiaryName().toUpperCase() + "%");
            System.out.println("Parameter adhocBeneficiaryName: " + criteria.getAdhocBeneficiaryName().toUpperCase());
        }

        if (criteria.getFromDate() != null) {
            query.setParameter("fromDate", criteria.getFromDate());
            System.out.println("Parameter fromDate: " + criteria.getFromDate());
        }

        if (criteria.getToDate() != null) {
            query.setParameter("toDate", criteria.getToDate());
            System.out.println("Parameter toDate: " + criteria.getToDate());
        }

        List<PaymentDto> results = query.getResultList();
        System.out.println("Search Results: " + results);
        return results;
    }

    @Override
    public void createPayment(PaymentDto dto) {
        PaymentEntity entity = new PaymentEntity(
            dto.getAccNo(),
            dto.getBeneficiaryId(),
            dto.getPaymentTypeId(),
            dto.getDate_created(),
            dto.getAmountTransfer(),
            dto.getTransferCurrency(),
            dto.getSubmisionMethod(),
            dto.getStatus(),
            dto.getBatchId(),
            dto.getCustomerBatchRef(),
            dto.getFileName(),
            dto.getAdhocBeneficiaryName(),
            dto.getAdhocAccountNo(),
            dto.getAdhocBeneficiaryCode(),
            dto.getAdhocBeneficiaryCdiRef()
        );

        this.em.persist(entity);

        // Update the PaymentDto with the generated paymentId
        dto.setPaymentId(entity.getPaymentId());

        // Send to JMS queue using try-with-resources
        try {
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup("jms/PaymentConnectionFactory");
            Queue queue = (Queue) ctx.lookup("jms/PaymentQueue");

            try (Connection connection = connectionFactory.createConnection();
                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)) {
                MessageProducer producer = session.createProducer(queue);
                ObjectMessage message = session.createObjectMessage(dto);
                producer.send(message);
                System.out.println("JMS message sent for payment: " + dto);
            }
        } catch (NamingException e) {
            throw new RuntimeException("Failed to send payment to JMS queue: JNDI lookup failed", e);
        } catch (JMSException e) {
            throw new RuntimeException("Failed to send payment to JMS queue: JMS error", e);
        }
    }
}
